//https://leetcode.com/problems/rotting-oranges/
class Solution {
public:
    #define PROCESSED -1
    #define EMPTY 0
    #define FRESH 1
    #define ROTTEN 2
    
    int orangesRotting(vector<vector<int>>& grid) {
        int numRows = grid.size();
        int numCols = numRows ? grid[0].size() : 0;
        int totalFresh = 0, totalMinutes = 0;
        queue<pair<int,int>> bfsQueue;
        
        // Count fresh and add rotting to the BFS queue
        for (int row = 0; row < numRows; ++row) {
            for (int col = 0; col < numCols; ++col) {
                int& gridVal = grid[row][col];
                totalFresh += gridVal == FRESH ? 1 : 0;
                if (gridVal == ROTTEN) {
                    gridVal = PROCESSED;
                    bfsQueue.push({row,col});
                }
            }
        }
        if (!totalFresh)
            return 0;
        
        // BFS rot the oranges, each queue iteration is 1 minute
        while (bfsQueue.size()) {
            int queueSize = bfsQueue.size();
            for (int i = 0; i < queueSize; ++i) {
                pair<int,int> rowCol = bfsQueue.front(); bfsQueue.pop();
                int row = rowCol.first, col = rowCol.second;

                // Process neighbors: above, below, left, right
                static vector<pair<int,int>> offsets = {{-1,0},{1,0},{0,-1},{0,1}};
                for (auto& offset : offsets) {
                    int newRow = row+offset.first;
                    int newCol = col+offset.second;
                    if (/* newRow is valid */ newRow >= 0 && newRow < numRows && 
                        /* newCol is valid */ newCol >= 0 && newCol < numCols) {
                        int& gridVal = grid[newRow][newCol];
                        if (gridVal == PROCESSED || gridVal == EMPTY)
                            continue;            
                        if (gridVal == FRESH)
                            --totalFresh;
                        gridVal = PROCESSED;
                        bfsQueue.push({newRow,newCol});
                    }
                }
            }
            
            // One iteration took place, add one to 'minutes'
            ++totalMinutes;
            if (totalFresh == 0)
                break;
        }
        
        return totalFresh ? -1 : totalMinutes;
    }
};
